import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

DF = pd.read_csv('diabetes.csv')
print(DF.head())
X = DF.drop('Outcome', axis=1) 
y = DF['Outcome']

#Logistic regression
classifier = LogisticRegression(random_state=0, max_iter=1000) 
classifier.fit(X_train, y_train)
from sklearn.metrics import confusion_matrix, accuracy_score
accuracy_score(y_test, y_pred)
y_pred = classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
print("Accuracy:", accuracy_score(y_test, y_pred))

#Softmax Regression
X = DF.iloc[:, :-1].values  
y = DF.iloc[:, -1].values
print(DF.head())
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
softmax_reg = LogisticRegression(multi_class='multinomial', solver='lbfgs', C=10)
softmax_reg.fit(X_train, y_train)

#Decision boundary
from sklearn.datasets import make_classification
X, y = make_classification(n_samples=200, n_features=2, n_informative=2, n_redundant=0, n_classes=2, random_state=1)
!pip install mlxtend  

import matplotlib.gridspec as gridspec
from mlxtend.plotting import plot_decision_regions
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression  
gs = gridspec.GridSpec(3, 2)
fig = plt.figure(figsize=(14, 10))
label = 'Logistic Regression'
clf = LogisticRegression(random_state=0)
clf.fit(X, y)
fig = plot_decision_regions(X=X, y=y, clf=clf, legend=2)
plt.title(label)
plt.show()
